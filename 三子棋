game.h
#ifndef __GAME_H__
#define __GAME_H__
#include<stdio.h>
#include<windows.h>
#include<time.h>
#pragma warning (disable:4996)
#define ROW 3//棋盘行
#define COL 3//棋盘列
#define PLAYER 'X'//玩家的棋子
#define COMPUTER 'O'//电脑的棋子
#define NEXT 'N'//未分胜负且棋盘未满 继续
#define FULL 'F'//棋盘下满，平局
void menu();//菜单
void game(int* quit);//开始游戏
void inti_board(char[][COL], int row, int col);//初始化棋盘
void show_board(char board[][COL], int row, int col);//显示棋盘
void playermove(char board[][COL], int row, int col);//玩家走棋
void computermove(char board[][COL], int row, int col);//电脑走棋
char judge(char board[][COL], int row, int col);//判断
int first_step();//谁先走
#endif
main.c
#include"game.h"
int main() {
	srand((unsigned long)time(NULL));
	int quit = 0;
	do {
		menu();//展示菜单主界面
		int select = 0;
		scanf("%d", &select);
		switch (select) {
		case 1:
			game(&quit);

			break;
		case 2:
			printf("ByeBye！\n");
			quit = 1;
			break;
		default:
			break;
		}
    } while (!quit);
}
game.c
#include"game.h"
void menu() {
	printf("***********************\n");
	printf("***  三子棋小游戏   ***\n");
	printf("***********************\n");
	printf("*****   1.Play    *****\n");
	printf("*****   2.Exit    *****\n");
	printf("***********************\n");
	printf("请选择：->");
}
//初始棋盘全部置空（空格）
void init_board(char board[][COL], int row, int col) {
	for (int i = 0; i < row; i++) {
		for (int j = 0; j < col; j++) {
			board[j][i] = ' ';
		}
	}
}
void show_board(char board[][COL], int row, int col) {

	printf("     1 | 2 | 3 \n");
	printf("----------------\n");
	for (int i = 1; i <= row; i++) {
		printf(" %d | ", i);
		for (int j = 0; j < col; j++) {
			printf("%c | ", board[i - 1][j]);
		}
		printf("\n----------------\n");

	}
}
void playermove(char board[][COL], int row, int col) {
	printf("轮到玩家走棋（输入坐标）：");
	int x = 0;
	int y = 0;
	do {
		scanf("%d %d", &x, &y);
		if (x < 1 || x > 3 || y < 1 || y > 3 || board[x - 1][y - 1] != ' ') {
			printf("输入的坐标有误，请重新输入：");
			continue;
		}
		else {
			board[x - 1][y - 1] = PLAYER;
			break;
		}

	} while (1);
}
void computermove(char board[][COL], int row, int col) {

	printf("电脑思考中...\n");
	Sleep(120);
	if (board[1][1] == ' ') {
		board[1][1] = COMPUTER;
	}
	else {
		while (1) {
			int x = rand() % 3;
			int y = rand() % 3;
			if (board[x][y] == ' ') {
				board[x][y] = COMPUTER;
				break;
			}
		}
	}
}
char judge(char board[][COL], int row, int col) {
	for (int i = 0; i < row; i++) {
		if (board[i][0] == board[i][1] &&\
			board[i][2] == board[i][1]) {
			return board[i][1];
		}
	}
	for (int i = 0; i < col; i++) {
		if (board[0][i] == board[1][i] && \
			board[1][i] == board[2][i]) {
			return board[1][i];
		}
	}
	if ((board[1][1] == board[0][0] && board[1][1] == board[2][2]) || 
		(board[1][1] == board[0][2] &&board[1][1] == board[2][0])) {
		return board[1][1];
	}
	for (int i = 0; i < row; i++) {
		for (int j = 0; j < col; j++) {
			if (board[i][j] == ' ') {
				return 'N';
			}
		}
	}
	return 'F';
}
int first_step() {
	int select = 0;
	printf(" 1.玩家先走   2.电脑先走   3.随机\n");
	printf("请选择先后：\n");
	scanf_s("%d", &select);
	switch (select) {
	case 1:
		return 1;
		break;
	case 2:
		return 0;
		break;
	case 3:
		printf("随机结果为：");
		int result = rand() % 2;
		if (result) {
			printf("玩家先\n");
		}
		else
			printf("电脑先\n");
		return result;
	default:
		break;
	}
}

void game(int* quit) {

	do {
		char board[ROW][COL];//棋盘
		int first = first_step();
		init_board(board, ROW, COL);//清空棋盘
		char who_win = NEXT;//胜负标志
		show_board(board, ROW, COL);//显示棋盘
		do {
			if (first) {
				playermove(board, ROW, COL);//玩家走棋
				show_board(board, ROW, COL);//显示棋盘
				who_win = judge(board, ROW, COL);//判断
				if (who_win == PLAYER) {//玩家赢
					printf("恭喜！你赢了！\n");
					break;
				}
				if (who_win == COMPUTER) {//电脑赢
					printf("很遗憾，你输了！\n");
					break;
				}
				if (who_win == FULL) {
					printf("平局!\n");
					break;
				}
				computermove(board, ROW, COL);//电脑走棋
				show_board(board, ROW, COL);//显示棋盘
				who_win = judge(board, ROW, COL);//判断

				if (who_win == PLAYER) {
					printf("恭喜！你赢了！\n");
					break;
				}
				if (who_win == COMPUTER) {
					printf("很遗憾，你输了！\n");
					break;
				}
				if (who_win == FULL) {
					printf("平局!\n");
					break;
				}
			}
			else {
				computermove(board, ROW, COL);//电脑走棋
				show_board(board, ROW, COL);//显示棋盘
				who_win = judge(board, ROW, COL);//判断

				if (who_win == PLAYER) {
					printf("恭喜！你赢了！\n");
					break;
				}
				if (who_win == COMPUTER) {
					printf("很遗憾，你输了！\n");
					break;
				}
				if (who_win == FULL) {
					printf("平局!\n");
					break;
				}

				playermove(board, ROW, COL);//玩家走棋
				show_board(board, ROW, COL);//显示棋盘
				who_win = judge(board, ROW, COL);//判断
				if (who_win == PLAYER) {//玩家赢
					printf("恭喜！你赢了！\n");
					break;
				}
				if (who_win == COMPUTER) {//电脑赢
					printf("很遗憾，你输了！\n");
					break;
				}
				if (who_win == FULL) {
					printf("平局!\n");
					break;
				}
			}
		} while (1);
		printf("是否继续： 是：1  否：0\n");
		scanf("%d", &(*quit));
    } while (*quit);

}
	
